find(...).explain() : 特定查询相关的信息
：：nscanned是扫描过的文档数，n查询结果的数量，millis消耗的毫秒数

.explain().millis: 获取毫秒数

find().limit(1) : 限制查询文档数
：：查到指定的数目时，就会停止

coll.ensureIndex({"username", 1}) : 为username建立索引，1表示递增
：：索引的建立也会影响CRUD的时间，一个集合的索引不应超过2个

db.currentOp() : 查看当前操作
：：当执行一个操作很长时间后，可以在另一个shell中执行该操作以查看进度。如创建索引可能会是很长的操作

coll.find().sort({"age": 1, "name": 1}) : 先按照年龄排序，再按照name排序

find({ : ,: , ...},{ : , : }):指定了查询条件和返会字段的查询
::可以看作find传入了两个参数，第一个参数表示查询条件，第二个参数表示需要返回的字段。多个参数表示多种功能。

$in : 对指定字段进行OR运算
$or : 对多个字段进行或运算
$all ：匹配数组字段中的多个元素
find({"name" : {... , $exist : true}}) : name字段存在

find({x:{"$lt":1,"$gt":4}) : 匹配集合中字段x的值包含小于1和大于4的文档
：：文档{x : [1,2,3,4]}会被匹配。

find({"num":{$mod:[5,1]}}) : 匹配"num"值被5整除后余数为1的文档

查询文档中的值不能包含变量，也就是不能包含引用

find({"name":/joey/}) ：匹配name的值含有joey字符的文档
：：也会匹配/joey/文档本身
：：/i 表示忽略大小写区分
：：使用Prel的匹配规则 http://www.chinaunix.net/old_jh/25/159388.html 仅仅是匹配而没有替换

$size : 匹配数组的个数

coll.remove() : 删除集合coll中的所有数据，但不包括集合本身

coll.remove({"name":"joey"}) : 删除集合coll中name字段值为joey的文档
::{"name":"joey} 是一个查询文档

coll.drop() : 删除集合coll，包括集合本身
::与remove()方式相比，速度很快，但不能指定限制条件

new Date().getTime() : 获取当前的时间
::单位是毫秒ms

doc.name2 = doc.name1 : 文档doc的name2字段的值为name1的值
::若name2不存在，则新建一个

coll.update({"name":"joe"},{op}) ：对集合coll中的name=joe的字段执行{op}操作
::{op}可以为一个新文档，表示替换查询到的文档，也可以为修改器,包括$inc,$set,

$inc : 为字段的值增加或减小一个数子
::用于数字类型
::字段不存在就创建一个
::对非数字类型操作会报错

$set : 对字段重新赋值
::不存在则创建
::可以改变键的类型

$unset : 删除键
::{"$unset" : {"key": 1}}

$push : 向数组字段添加值
::update({"name":"joe"},{"$push" : {"number" : 1}})

$each : 向数组中添加时，可以添加多个值
::update({"name":"joe"},{"$push" : {"number" : {"$each": 1,2,3}})
::{"number":{$each:1}} 同 {"number":1}

$slice: 限制更新操作时数组的长度，保留最后的10条
::嵌套在$push、"key"中。{"$push":{"top10":{value, "$slice" : -10}}}
::值为负整数

$addToSet : 避免向数组中插入重复地址
::coll.update({...},{"$addToSet":{"emails":"com@..."})
::coll.update({...},{"$addToSet":{"emails":{"$each":["mail1@...","mail2@...",...]})

$pop : 删除数组头或尾的单个元素
::{"$pop" : {"keys":1}} 删除数组keys中的末尾元素，-1表示从头部删除。

$pull : 删除匹配的元素
::coll.update({},{"$pull":{"keys":"hey"}}) 删除集合coll中的keys字段里面的hey元素
::相同的匹配值都会被删除

coll.upsert({url : "/blog/id=..."},{"$inc":{"pageviews":1}},true) : 更新指定doc，若不存在则创建一条文档，包含涉及的字段。
::ture参数表示insert的功能

$setOnInsert ： 当文档不存在时起效
::coll.upsert({},{"$setOnInsert":{"createAt":new Date()},true})

coll.update(_,_,_,true) : 更新多个文档
::默认update只会更新第一个匹配的文档。

db.runCommand({getLastError:1}) : 返回最后一次操作的相关信息
::返回的json中key="n"所对应的值为更新操作update影响的文档数

findAndModify : 先查询，再进行修改
::db.runCommand("findAndModify":"coll","query":{},"sort":{},"update":{"$set":{"field":"value"}})
::这是一个原子操作

$ : 定位操作符，定位查询文档已经匹配的数组元素
::blog.update({"comments.author":"Joy"},{"$set",comments.$.author}) //$代表了匹配的下标
::$可以表示查询中匹配的元素，如果匹配和查询条件相关考虑使用定位操作符

$slice : 返回某个键匹配的数组元素的一个子集
::find({},{"comments":{"$slice":10}}) //返回comments数组中的前10条，-10表示后10条
::{"$slice":[3,6]} //指定偏移值和返回数量:从第4个元素开始，返回6个，不够则返回剩下的全部。
::find的第二个参数表示想要筛选的部分，但slice只是筛选了数组的成员，并影响其他的键